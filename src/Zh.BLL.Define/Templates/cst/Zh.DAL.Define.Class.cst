<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a C# class for use with NHibnate" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the mapping file is based on" %>
<%@ Property Name="Namespace" Type="System.String" Default="Zh.DAL.Define.Entities" Category="Object" Description="The class namespace that the mapping file should use" %>
<%@ Property Name="Assembly" Type="System.String" Default="Zh.DAL.Define" Category="Object" Description="The assembly that the class will be used in" %>
<%@ Property Name="RemoveTablePrefix" Type="System.String" Default="tbl" Category="Object" Description="The prefix to remove from table names" %>
<%@ Property Name="ForceId" Type="System.Boolean" Default="true" Category="Object" Description="Force Id for identity column" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections.Generic" %>

/*
 * Author: 陈志杭 Caspar 
 * Contact: 279397942@qq.com qq:279397942
 * Description: 数据契约实体模型文件
 * 文件由模板生成,请不要直接修改文件,如需修改请创建一个对应的partial文件
 */
using System;
using System.Collections;
using System.Collections.Generic;
using Zh.DAL.Define.Entities;
using Zh.DAL.Base.Define.Entities;

namespace <%= Namespace %>
{
	#region <%= SourceTable.Name %>

	/// <summary>
    /// <%= SourceTable.Description %>
	/// <%= SourceTable.Name %> object for mapped table '<%= SourceTable.Name %>'.
	/// </summary>
	public partial class <%= SourceTable.Name %>
	{
		
		#region Constructors
        <% //构造函数begin %>
        
		public <%= SourceTable.Name %>() { }        
        
		public <%= SourceTable.Name %>( <%
			int count = 0;
			foreach(ColumnSchema column in SourceTable.Columns)
			{
				if (count > 0) Response.Write(", ");
				%><%= MemberType(column) %> <%= ParameterName(column) %><%
				count ++;
			}
			%> )
		{
		<% foreach(ColumnSchema column in SourceTable.Columns) { %>
   
			this.<%= column.Name %> = <%= ParameterName(column) %>;
		<% } %>
		}
        <% //构造函数end %>
		#endregion

		#region Public Properties
        <% //表列属性begin %>
	 	<% foreach(ColumnSchema column in SourceTable.Columns) { %>
        /// <summary>
        /// <%=column.Description%>
        /// </summary>
		public virtual <%= MemberType(column) %> <%= column.Name %> { get; set; }
        <%} %>        
        <% //表列属性end %>
        
        <%            
            List<TableKeySchema> primaryKeyOrderList = new List<TableKeySchema>();
            foreach(TableKeySchema primaryKey in SourceTable.PrimaryKeys) { 
                if(IsOneToOneTable2(primaryKey)){
                    primaryKeyOrderList.Insert(0,primaryKey);   
                }else{
                    primaryKeyOrderList.Add(primaryKey);
                }
            }  
        %>
        <% //父表属性begin %>
        <% foreach(TableKeySchema foreignKey in SourceTable.ForeignKeys) { %>    
            <% 
                string description = string.IsNullOrEmpty(foreignKey.Description) ? foreignKey.PrimaryKeyTable.Description : foreignKey.Description;
                string foreignKeyClassName = foreignKey.PrimaryKeyTable.Name;
                string foreignKeyPropertyName = GetRepeatPropertyName(foreignKeyClassName,foreignKeyClassName); 
            %>
        /// <summary>
        /// <%=description%>
        /// </summary>            
        public virtual <%=foreignKeyClassName%> <%=foreignKeyPropertyName %>{get;set;}
        <%} %>
        <% //父表属性begin %>
        
        <% //子表属性begin %>     
		<% foreach(TableKeySchema primaryKey in primaryKeyOrderList) { %>      
            <%
                string description = string.IsNullOrEmpty(primaryKey.Description) ? primaryKey.ForeignKeyTable.Description : primaryKey.Description;
                string foreignKeyClassName = primaryKey.ForeignKeyTable.Name;
                string foreignKeyPropertyName = GetRepeatPropertyName(foreignKeyClassName,foreignKeyClassName); 
            %>
            <% if(IsOneToOneTable2(primaryKey)) %>
            <%{ %>
        /// <summary>
        /// <%=description%>
        /// </summary>
        public virtual <%=foreignKeyClassName%> <%=foreignKeyPropertyName %>{get;set;}
            <%} %>
            <% else %>
            <%{ %>
                 <%
  
                %>
        /// <summary>
        /// <%=description%>
        /// </summary>
        public virtual IList<<%=foreignKeyClassName%>> <%=foreignKeyPropertyName %>{get;set;}
            <%} %>
		<% } %>
        <% //子表属性end %>


		#endregion
	 
	}
	#endregion
}
<!-- #include file="../Funcation.inc" -->
<!-- #include file="Funcation2.cst" -->
 